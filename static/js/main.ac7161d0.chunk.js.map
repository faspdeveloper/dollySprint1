{"version":3,"sources":["components/common/AuthenticationService.js","components/common/AuthenticatedRoute.jsx","Js/validation.js","Constants.js","api/LoginService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","components/common/ErrorComponent.jsx","api/RegistrationService.js","api/UserService.js","components/user/RegistrationComponent.jsx","components/user/UserApprovalComponent.jsx","components/common/Sidebar.jsx","components/user/AddUserComponent.jsx","components/user/UserListComponent.jsx","components/user/EditUserApprovalComponent.jsx","api/SignUpService.js","components/user/EditUserComponent.jsx","components/user/RoleListComponent.jsx","components/user/AddRoleComponent.jsx","components/common/EncryptionAndDecryptionComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["localStorage","getItem","console","log","basicAuthHeader","axios","interceptors","request","use","config","headers","authorization","Component","$","validator","addMethod","value","element","this","optional","test","API_URL","username","password","post","ErrorComponent","get","countryId","stateId","json","put","userId","user","Sidebar","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRA4Be,M,yGAtBP,OAAa,OADFA,aAAaC,QAAQ,uB,+CAMhCC,QAAQC,IAAI,4BACZ,IACIC,EAAkB,UADVJ,aAAaC,QAAQ,SAEjCC,QAAQC,IAAI,WAAWC,GACvBC,IAAMC,aAAaC,QAAQC,KAEvB,SAACC,GAEG,OADAA,EAAOC,QAAQC,cAAgBP,EACxBK,S,iBCfUG,Y,4BCCjCC,IAAEC,UAAUC,UAAU,WAAW,SAAUC,EAAOC,GAE9C,OAAOC,KAAKC,SAASF,IAAY,sBAAsBG,KAAKJ,KAE3D,oECTE,IAAMK,EAAU,wBCYR,M,qGALEC,EAAUC,GACnB,OAAOlB,IAAMmB,KAAN,UAAcH,EAAd,iBAAqC,CAACC,WAAUC,YAAU,Q,+BCE7BX,YCRbA,YCMhBa,I,QC8BA,M,yGAjCP,OAAOpB,IAAMqB,IAAN,UAAaL,EAAb,uBAA2C,M,mCAIzCM,GACT,OAAOtB,IAAMqB,IAAN,UAAaL,EAAb,6BAAyCM,GAAa,M,kCAIrDA,EAAWC,GACnB,OAAOvB,IAAMqB,IAAN,UAAaL,EAAb,4BAAwCM,EAAxC,YAAqDC,GAAW,M,uCAI1DC,GAIb,OAHA3B,QAAQC,IAAI0B,GAGLxB,IAAMyB,IAAN,UAAaT,EAAb,0BAA8CQ,EAAM,M,4CAK3D,OAAOxB,IAAMqB,IAAN,UAAaL,EAAb,4BAAgD,M,mCAI9CQ,GACT,OAAOxB,IAAMyB,IAAN,UAAaT,EAAb,qBAAyCQ,EAAM,Q,MCa/C,GCvCoCjB,YCJfA,YF2CrB,I,0GAxCP,OAAOP,IAAMqB,IAAN,4CAAuD,M,oCAI9D,OAAOrB,IAAMqB,IAAN,wCAAmD,M,gDAI1D,OAAOrB,IAAMqB,IAAN,oDAA+D,M,qCAItE,OAAOrB,IAAMqB,IAAN,yCAAoD,M,iCAGpDG,GAIP,OAHA3B,QAAQC,IAAI0B,GAGLxB,IAAMyB,IAAN,wCAAmDD,EAAM,M,oCAIhE,OAAOxB,IAAMqB,IAAN,wCAAmD,M,sCAG9CK,GACZ,OAAO1B,IAAMqB,IAAN,oDAAuDK,GAAU,M,+BAGnEF,GACL,OAAOxB,IAAMyB,IAAN,sCAAiDD,EAAM,M,oCAGpDG,GACV,OAAO3B,IAAMyB,IAAN,2CAAsDE,EAAM,Q,OGd5DC,GClB+BrB,YCACA,YCFQA,YC4BxC,I,yGA/BP,OAAOP,IAAMqB,IAAN,2CAAsD,M,8CAIzCC,GACpB,OAAOtB,IAAMqB,IAAN,4DAA+DC,GAAa,M,qCAInF,OAAOtB,IAAMqB,IAAN,yCAAoD,M,uDAI9BC,EAAWC,GACxC,OAAOvB,IAAMqB,IAAN,gDAAmDC,EAAnD,YAAgEC,GAAW,M,oCAIlF,OAAOvB,IAAMqB,IAAN,wCAAmD,M,uCAI7CG,GAIb,OAHA3B,QAAQC,IAAI0B,GAGLxB,IAAMyB,IAAN,8CAAyDD,EAAM,Q,MCpB/BjB,YCNAA,YCKDA,YCHgBA,Y,iLRYtD,OACI,yBAAKsB,UAAU,gB,GAHLtB,cSHPuB,MATf,WAEE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,QCIcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ac7161d0.chunk.js","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService {\n\n    isUserLoggedIn() {\n        let user = localStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    setupAxiosInterceptors() {\n        console.log(\"Inside interceptor setup\");\n        let token = localStorage.getItem('token');\n        let basicAuthHeader = 'Bearer ' + token\n        console.log(\"headers=\"+basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n        \n    }\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from \"react\";\nimport AuthenticationService from \"./AuthenticationService.js\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nclass AuthenticatedRoute extends Component {\n\n    render() {\n        if (AuthenticationService.isUserLoggedIn) {\n            console.log(\"in user logged in\")\n            return <Route {...this.props} />\n        } else {\n            console.log(\"in else\")\n            return <Redirect to=\"/login\" />\n        }\n    }\n\n}\n\nexport default AuthenticatedRoute","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");","export const API_URL = 'http://localhost:8081'","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n}\n\nexport default new LoginService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.registration = this.registration.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Login</h3>\n                    <p>{this.props.match.params.message}</p>\n                    Username : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    Password : <input type=\"password\" id=\"password\" name=\"password\" /><br></br><br></br>\n                    <button type=\"button\" onClick={this.loginClicked}>Login</button><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.registration}>Sign Up</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            console.log(\"Going to perform login\");\n            if (!AuthenticationService.isUserLoggedIn===false  && navigator.onLine) {\n                console.log(\"Inside Authentication not found\");\n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        localStorage.setItem('token', response.data.token);\n                        AuthenticationService.setupAxiosInterceptors();\n                        this.props.history.push(`/welcome`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                if (AuthenticationService.isUserLoggedIn) {\n                    console.log(\"Offline authentication\");\n                    // let user = localStorage.getItem('authenticatedUser');\n                    // var userJson = JSON.parse(user);\n                    // var bytes = CryptoJS.AES.decrypt(userJson.password, 'my-secret-key@123');\n                    // var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                    // if (userJson.emailId === username) {\n                        // this.props.history.push(`/welcome`)\n                    // } else {\n                        // this.setState({\n                            // message: \"Invalid Credentials.\"\n                        // })\n                    // }\n                } else {\n                    alert(\"You must be Online for a first time login.\")\n                }\n            }\n        }\n    }\n\n    registration() {\n        this.props.history.push(`/registration`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.listUserApproval=this.listUserApproval.bind(this);\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!!</h1>\n                <button type=\"button\" onClick={this.listUserApproval}>User Approval</button><br></br><br></br>\n            </>\n        );\n    }\n\n    listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }\n}\n\nexport default WelcomeComponent","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div>An Error occurred</div>\n    )\n}\n\nexport default ErrorComponent","import axios from \"axios\"\nimport {API_URL} from '../Constants.js' \n\nclass RegistrationService {\n    getCountryList() {\n        return axios.get(`${API_URL}/api/getCountryList`, {\n        });\n    }\n\n    getStateList(countryId) {\n        return axios.get(`${API_URL}/api/getStateList/${countryId}`, {\n        });\n    }\n\n    getCityList(countryId, stateId) {\n        return axios.get(`${API_URL}/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/saveRegistration/`, json, {\n        });\n    }\n\n    getUserApprovalList() {\n        return axios.get(`${API_URL}/api/getUserApprovalList`, {\n        });\n    }\n\n    saveApproval(json) {\n        return axios.put(`${API_URL}/api/saveApproval`, json, {\n        });\n    }\n}\n\nexport default new RegistrationService()","import axios from \"axios\";\nimport { API_URL } from '../Constants';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`http://localhost:8081/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`http://localhost:8081/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`http://localhost:8081/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`http://localhost:8081/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/addNewUser/`, json, {\n        });\n    }\n    getUserList() {\n        return axios.get(`http://localhost:8081/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`http://localhost:8081/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`http://localhost:8081/api/editUser/`, json, {\n        });\n    }\n    unlockAccount(user) {\n        return axios.put(`http://localhost:8081/api/unlockAccount/`, user, {\n        });\n    }\n}\n\nexport default new UserService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport RegistrationService from \"../../api/RegistrationService.js\";\n\n\nexport default class RegistrationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.registerClicked = this.registerClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        $.validator.addMethod('nofreeemail', function (value) {\n            return /^([\\w-.]+@(?!gmail\\.com)(?!yahoo\\.com)(?!hotmail\\.com)([\\w-]+.)+[\\w-]{2,4})?$/.test(value);\n        }, 'Free email addresses are not allowed.');\n\n\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                firstName: {\n                    required: true\n                },\n                lastName: {\n                    required: true\n                },\n                emailId: {\n                    required: true,\n                    email: true,\n                    nofreeemail:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"register\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.registerClicked}>\n                    <h3>Sign Up</h3>\n                    First Name : <input type=\"text\" id=\"firstName\" name=\"firstName\" onChange={this.dataChange} /><br></br><br></br>\n                    Last Name : <input type=\"text\" id=\"lastName\" name=\"lastName\" onChange={this.dataChange} /><br></br><br></br>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" onChange={this.dataChange} /><br></br><br></br>\n                    <button type=\"submit\">Sign Up</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    registerClicked(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            var json = this.state\n            if ($(\"#form1\").valid()) {\n                RegistrationService.saveRegistration(json)\n                    .then(response => {\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from \"react\";\nimport RegistrationService from '../../api/RegistrationService.js';\n\nclass UserApprovalComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listUserApproval: []\n        }\n        this.updateUserApproval = this.updateUserApproval.bind(this);\n    }\n\n\n    componentDidMount() {\n        RegistrationService.getUserApprovalList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listUserApproval: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <h1>List User Approval</h1>\n                <p>{this.props.match.params.message}</p>\n                <div className=\"container\">\n                    <table border=\"1\">\n                        <thead>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email Id</th>\n                                <th>Created date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.listUserApproval.map(\n                                    listUserApproval =>\n                                        <tr key={listUserApproval.registrationId} onClick={() => this.updateUserApproval(listUserApproval.registrationId, listUserApproval.emailId)}>\n                                            <td>{listUserApproval.firstName}</td>\n                                            <td>{listUserApproval.lastName}</td>\n                                            <td>{listUserApproval.emailId}</td>\n                                            <td>{listUserApproval.createdDate}</td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n    updateUserApproval(id, emailId) {\n        console.log(id);\n        console.log(emailId);\n        this.props.history.push(`/editUserApproval/${id}/${emailId}`)\n    }\n}\n\nexport default UserApprovalComponent","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport RegistrationComponent from \"../user/RegistrationComponent\";\nimport UserApprovalComponent from \"../user/UserApprovalComponent\";\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserApprovalComponent from \"../user/EditUserApprovalComponent\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport EncryptionAndDecryptionComponent from \"../common/EncryptionAndDecryptionComponent.jsx\";\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"Sidebar\">\n         \n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { COUNTRY,EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ADDRESS, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_ADD_USER}</h3>\n                    {REALM} : <select id=\"realmId\" name=\"realmId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"roleId\" name=\"roleId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"languageId\" name=\"languageId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {COUNTRY} : <select id=\"countryIds\" name=\"countryIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst cache = {}\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{REALM}</th>\n                                <th>{USERNAME}</th>\n                                <th>{EMAIL_ID}</th>\n                                <th>{PHONE_NO}</th>\n                                <th>{ROLE}</th>\n                                <th>{PREFERRED_LANGUAGE}</th>\n                                <th>{LAST_LOGIN_DATE}</th>\n                                <th>{FAILED_ATTEMPTS}</th>\n                                <th>{ACTIVE}</th>\n                                <th>{BTN_EDIT}</th>\n                                <th>{BTN_FAILED_ATTEMPTS}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.userList.map(\n                                    user =>\n                                        // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                        <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                            <td>{user.realm.realmCode}</td>\n                                            <td>{user.username}</td>\n                                            <td>{user.emailId}</td>\n                                            <td>{user.phoneNumber}</td>\n                                            <td>{user.role.roleName}</td>\n                                            <td>{user.language.languageName}</td>\n                                            <td>{user.lastLoginDate}</td>\n                                            <td>{user.faildAttempts}</td>\n                                            <td>{user.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                            </td>\n                                            <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                            <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(user) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(user)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport RegistrationService from '../../api/RegistrationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditUserApprovalComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.dataChange = this.dataChange.bind(this);\n        this.submitUserApproval = this.submitUserApproval.bind(this);\n        this.state = {\n            registrationId: this.props.match.params.registrationId,\n            status:true\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"editUserApproval\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.submitUserApproval}>\n                    <h3>User Approval</h3>\n                    <input type=\"hidden\" id=\"registrationId\" name=\"registrationId\" value={this.props.match.params.registrationId}></input>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" readOnly value={this.props.match.params.emailId} /><br></br><br></br>\n                    Status:\n                    <input type=\"radio\" id=\"status\" name=\"status\" value=\"TRUE\" onChange={this.dataChange} checked/> Approve\n                    <input type=\"radio\" id=\"status\" name=\"status\" onChange={this.dataChange} value=\"FALSE\" /> Reject\n                    <br></br><br></br>\n                    Notes : <textarea id=\"notes\" name=\"notes\" onChange={this.dataChange}></textarea><br></br><br></br>\n                    <button type=\"submit\">Submit</button><br></br><br></br>\n                </form>\n            </div>\n        )\n    }\n\n    submitUserApproval(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            if($(\"#form1\").valid()){\n            var json = this.state\n            console.log(json);\n            RegistrationService.saveApproval(json)\n                .then(response => {\n                    this.props.history.push(`/listUserApproval/Approval updated successfully`)\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import axios from \"axios\"\n\nclass SignUpService {\n    getCountryList() {\n        return axios.get(`http://localhost:8081/api/getCountryList`, {\n        });\n    }\n\n    getStateListByCountryId(countryId) {\n        return axios.get(`http://localhost:8081/api/getStateListByCountryId/${countryId}`, {\n        });\n    }\n    getStateList() {\n        return axios.get(`http://localhost:8081/api/getStateList`, {\n        });\n    }\n\n    getCityListByStateIdAndCountryId(countryId, stateId) {\n        return axios.get(`http://localhost:8081/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n    getCityList() {\n        return axios.get(`http://localhost:8081/api/getCityList`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/saveRegistration/`, json, {\n        });\n    }\n}\n\nexport default new SignUpService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport SignUpService from \"../../api/SignUpService\";\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: [],\n            user: '',\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n\n    }\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            user: this.props.location.state.user\n        });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'username': {\n                    required: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.role.roleId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.role.roleId\") {\n            user.role.roleId = event.target.value\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                    {REALM} : <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"user.role.roleId\" name=\"user.role.roleId\" value={this.state.user.role ? this.state.user.role.roleId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {ACTIVE}:\n                    <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                    <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                    <br></br><br></br>\n\n                    <button type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            var json = this.state.user;\n            if ($(\"#userForm\").valid()) {\n                UserService.editUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"Initial message\"\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"Going to call axios setup\");\n        \n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <div>Hi this is the Role list page</div>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Role Id</th>\n                            <th>Role name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.roleName}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n                <h3>{this.state.message}</h3>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { ROLE_NAME,ROLE_ID,BUSINESS_FUNCTION,CAN_CREATE_ROLE,TITLE_ADD_ROLE,BTN_SUBMIT, BTN_CANCEL} from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n            UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n       \n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <option key={i} value={item.businessFunctionId}>{item.businessFunctionDesc}</option>\n                )\n            }, this);\n            let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addRole\">\n                <form name=\"roleForm\" id=\"roleForm\">\n                    <h3>{TITLE_ADD_ROLE}</h3>\n                    {ROLE_NAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {ROLE_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {BUSINESS_FUNCTION} : <select id=\"businessFunctionIds\" name=\"businessFunctionIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {businessFunctionsList}\n                    </select><br></br><br></br>\n                    {CAN_CREATE_ROLE} : <select id=\"canCreateRoleIds\" name=\"canCreateRoleIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        // console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CryptoJS from 'crypto-js';\n\nexport default class EncryptionAndDecryptionComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            encryptedText: '',\n            decryptedText:''\n        }\n        this.dataChange = this.dataChange.bind(this);\n        this.encrypt = this.encrypt.bind(this);\n        this.decrypt = this.decrypt.bind(this);\n    }\n\n    render() {\n        return (\n            <div>\n                JSON text to be encrypted<br /><br />\n                <textarea id=\"jsonText\" name=\"jsonText\" onChange={this.dataChange} /><br></br><br></br>\n                <button type=\"submit\" onClick={this.encrypt}>Encrypt</button><br></br><br></br>\n                Encrypted text is : {this.state.encryptedText}<br></br><br></br>\n                <hr></hr>\n                Encrpted text to be decrypted<br /><br />\n                <textarea id=\"encyptedTextToBeDecrypted\" name=\"encyptedTextToBeDecrypted\" onChange={this.dataChange} /><br></br><br></br>\n                <button type=\"submit\" onClick={this.decrypt}>Decrypt</button><br></br><br></br>\n                Decrypted text is : {this.state.decryptedText}\n\n            </div>\n        )\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n\n    }\n\n    encrypt() {\n        var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(this.state.jsonText), 'secret key 123');\n        this.setState({\n            encryptedText: ciphertext.toString()\n        })\n    }\n\n    decrypt() {\n        console.log('in decrypt');\n        var bytes = CryptoJS.AES.decrypt(this.state.encyptedTextToBeDecrypted, 'secret key 123');\n        var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n\n        this.setState({\n            decryptedText: JSON.parse(plaintext)\n        })\n\n    }\n}","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/common/Sidebar';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import * as serviceWorker from './serviceWorker'/;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}