{"version":3,"sources":["components/common/AuthenticationService.js","components/common/AuthenticatedRoute.jsx","Js/validation.js","Constants.js","api/LoginService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","components/common/ErrorComponent.jsx","api/RegistrationService.js","components/user/RegistrationComponent.jsx","components/user/UserApprovalComponent.jsx","api/UserService.js","components/user/AddUserComponent.jsx","Labels.js","components/user/UserListComponent.jsx","components/user/EditUserApprovalComponent.jsx","components/user/EditUserComponent.jsx","api/SignUpService.js","components/user/RoleListComponent.jsx","components/user/AddRoleComponent.jsx","components/common/EncryptionAndDecryptionComponent.jsx","components/common/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["localStorage","getItem","console","log","basicAuthHeader","axios","interceptors","request","use","config","headers","authorization","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","$","validator","addMethod","value","element","optional","test","API_URL","username","password","post","LoginComponent","state","message","loginClicked","bind","registration","validate","ignore","rules","emailId","required","errorPlacement","error","insertAfter","className","name","id","match","params","type","onClick","val","valid","navigator","onLine","LoginService","authenticate","then","response","setItem","data","token","setupAxiosInterceptors","history","push","catch","setState","alert","WelcomeComponent","listUserApproval","ErrorComponent","get","countryId","stateId","json","put","RegistrationComponent","registerClicked","dataChange","firstName","lastName","email","nofreeemail","event","target","onSubmit","onChange","preventDefault","RegistrationService","saveRegistration","UserApprovalComponent","updateUserApproval","getUserApprovalList","border","map","key","registrationId","createdDate","userId","user","AddUserComponent","realms","languages","roles","submitClicked","cancelClicked","UserService","getRealmList","getLanguageList","getRoleList","phoneNumber","number","languageId","roleId","realmList","length","item","i","realmId","realmCode","languagesList","languageName","roleList","roleName","maxLength","minLength","multiple","realm","role","language","countryIds","addNewUser","UserListComponent","userList","editUser","unlockAccount","getUserList","style","marginLeft","align","lastLoginDate","faildAttempts","active","toString","e","stopPropagation","pathname","window","location","reload","EditUserApprovalComponent","submitUserApproval","status","readOnly","checked","saveApproval","EditUserComponent","_isMounted","updateClicked","RoleListComponent","AddRoleComponent","businessFunctions","getBusinessFunctionList","businessFunctionsList","businessFunctionId","businessFunctionDesc","EncryptionAndDecryptionComponent","encryptedText","decryptedText","encrypt","decrypt","ciphertext","CryptoJS","AES","JSON","stringify","jsonText","plaintext","encyptedTextToBeDecrypted","enc","Utf8","parse","Sidebar","path","exact","component","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"2NA4Be,M,yGAtBP,OAAa,OADFA,aAAaC,QAAQ,uB,+CAMhCC,QAAQC,IAAI,4BACZ,IACIC,EAAkB,UADVJ,aAAaC,QAAQ,SAEjCC,QAAQC,IAAI,WAAWC,GACvBC,IAAMC,aAAaC,QAAQC,KAEvB,SAACC,GAEG,OADAA,EAAOC,QAAQC,cAAgBP,EACxBK,S,MCDRG,E,iLAXP,OAAIC,EAAsBC,gBACtBZ,QAAQC,IAAI,qBACL,kBAAC,IAAUY,KAAKC,SAEvBd,QAAQC,IAAI,WACL,kBAAC,IAAD,CAAUc,GAAG,gB,GARCC,a,6BCCjCC,IAAEC,UAAUC,UAAU,WAAW,SAAUC,EAAOC,GAE9C,OAAOR,KAAKS,SAASD,IAAY,sBAAsBE,KAAKH,KAE3D,oECTE,IAAMI,EAAU,wBCYR,M,qGALEC,EAAUC,GACnB,OAAOvB,IAAMwB,KAAN,UAAcH,EAAd,iBAAqC,CAACC,WAAUC,YAAU,Q,+BCEpDE,E,YAEjB,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTC,QAAS,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANL,E,iFAUff,IAAE,UAAUiB,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHC,QAAS,CACLC,UAAU,GAEdZ,SAAU,CACNY,UAAU,IAGlBC,eAAgB,SAAUC,EAAOnB,GAC7BmB,EAAMC,YAAYpB,Q,+BAO1B,OACI,yBAAKqB,UAAU,SACX,0BAAMC,KAAK,QAAQC,GAAG,SAClB,qCACA,2BAAI/B,KAAKC,MAAM+B,MAAMC,OAAOhB,SAFhC,cAGe,2BAAOiB,KAAK,OAAOH,GAAG,UAAUD,KAAK,YAAY,6BAAS,6BAHzE,cAIe,2BAAOI,KAAK,WAAWH,GAAG,WAAWD,KAAK,aAAa,6BAAS,6BAC3E,4BAAQI,KAAK,SAASC,QAASnC,KAAKkB,cAApC,SAAgE,6BAAS,6BACzE,kBAAC,SAAD,KAAQ,4BAAQgB,KAAK,SAASC,QAASnC,KAAKoB,cAApC,WAAkE,6BAAS,8BACnF,6BAAK,4BAAKpB,KAAKgB,MAAMC,c,qCAMrB,IAAD,OACPL,EAAWR,IAAE,YAAYgC,MACzBvB,EAAWT,IAAE,aAAagC,MAC1BhC,IAAE,UAAUiC,UACZlD,QAAQC,IAAI,2BACgC,KAAvCU,EAAsBC,gBAA2BuC,UAAUC,QAC5DpD,QAAQC,IAAI,mCACZoD,EAAaC,aAAa7B,EAAUC,GAC/B6B,MAAK,SAAAC,GACF1D,aAAa2D,QAAQ,QAASD,EAASE,KAAKC,OAC5ChD,EAAsBiD,yBACtB,EAAK9C,MAAM+C,QAAQC,KAAnB,eAEHC,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,eAOjDnB,EAAsBC,eACtBZ,QAAQC,IAAI,0BAaZgE,MAAM,iD,qCAOlBpD,KAAKC,MAAM+C,QAAQC,KAAnB,qB,GAhGoC9C,aCa7BkD,E,YAnBX,WAAYpD,GAAQ,IAAD,8BACf,4CAAMA,KACDqD,iBAAiB,EAAKA,iBAAiBnC,KAAtB,gBAFP,E,sEAMf,OACI,oCACI,yCACA,4BAAQe,KAAK,SAASC,QAASnC,KAAKsD,kBAApC,iBAA4E,6BAAS,gC,yCAM7FtD,KAAKC,MAAM+C,QAAQC,KAAnB,yB,GAjBuB9C,aCMhBoD,MANf,WACI,OACI,mD,QCkCO,M,yGAjCP,OAAOjE,IAAMkE,IAAN,UAAa7C,EAAb,uBAA2C,M,mCAIzC8C,GACT,OAAOnE,IAAMkE,IAAN,UAAa7C,EAAb,6BAAyC8C,GAAa,M,kCAIrDA,EAAWC,GACnB,OAAOpE,IAAMkE,IAAN,UAAa7C,EAAb,4BAAwC8C,EAAxC,YAAqDC,GAAW,M,uCAI1DC,GAIb,OAHAxE,QAAQC,IAAIuE,GAGLrE,IAAMsE,IAAN,UAAajD,EAAb,0BAA8CgD,EAAM,M,4CAK3D,OAAOrE,IAAMkE,IAAN,UAAa7C,EAAb,4BAAgD,M,mCAI9CgD,GACT,OAAOrE,IAAMsE,IAAN,UAAajD,EAAb,qBAAyCgD,EAAM,Q,MC1BzCE,E,YAEjB,WAAY5D,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTC,QAAS,IAEb,EAAK6C,gBAAkB,EAAKA,gBAAgB3C,KAArB,gBACvB,EAAK4C,WAAa,EAAKA,WAAW5C,KAAhB,gBANH,E,iFAUff,IAAEC,UAAUC,UAAU,eAAe,SAAUC,GAC3C,MAAO,gFAAgFG,KAAKH,KAC7F,yCAGHH,IAAE,UAAUiB,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHyC,UAAW,CACPvC,UAAU,GAEdwC,SAAU,CACNxC,UAAU,GAEdD,QAAS,CACLC,UAAU,EACVyC,OAAO,EACPC,aAAY,IAGpBzC,eAAgB,SAAUC,EAAOnB,GAC7BmB,EAAMC,YAAYpB,Q,iCAMnB4D,GACPpE,KAAKmD,SAAL,eACKiB,EAAMC,OAAOvC,KAAOsC,EAAMC,OAAO9D,U,+BAKtC,OACI,yBAAKsB,UAAU,YACX,0BAAMC,KAAK,QAAQC,GAAG,QAAQuC,SAAUtE,KAAK8D,iBACzC,uCADJ,gBAEiB,2BAAO5B,KAAK,OAAOH,GAAG,YAAYD,KAAK,YAAYyC,SAAUvE,KAAK+D,aAAc,6BAAS,6BAF1G,eAGgB,2BAAO7B,KAAK,OAAOH,GAAG,WAAWD,KAAK,WAAWyC,SAAUvE,KAAK+D,aAAc,6BAAS,6BAHvG,cAIe,2BAAO7B,KAAK,OAAOH,GAAG,UAAUD,KAAK,UAAUyC,SAAUvE,KAAK+D,aAAc,6BAAS,6BAChG,4BAAQ7B,KAAK,UAAb,WAAsC,6BAAS,6BAC/C,6BAAK,4BAAKlC,KAAKgB,MAAMC,c,sCAMrBmD,GAAQ,IAAD,OAEnB,GADAA,EAAMI,iBACFlC,UAAUC,OAAQ,CAClB,IAAIoB,EAAO3D,KAAKgB,MACZZ,IAAE,UAAUiC,SACZoC,EAAoBC,iBAAiBf,GAChCjB,MAAK,SAAAC,GACF,EAAK1C,MAAM+C,QAAQC,KAAnB,iBAAkCN,EAASE,KAAK5B,aAEnDiC,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,mBAQzDmC,MAAM,2B,GAvFiCjD,aC0EpCwE,E,YA7EX,WAAY1E,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTsC,iBAAkB,IAEtB,EAAKsB,mBAAqB,EAAKA,mBAAmBzD,KAAxB,gBALX,E,iFASE,IAAD,OAChBsD,EAAoBI,sBACfnC,MAAK,SAAAC,GACFxD,QAAQC,IAAIuD,EAASE,MACrB,EAAKM,SAAS,CACVG,iBAAkBX,EAASE,UAGlCK,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,gB,+BAQ/C,IAAD,OACL,OACI,oCACI,kDACA,2BAAIjB,KAAKC,MAAM+B,MAAMC,OAAOhB,SAC5B,yBAAKY,UAAU,aACX,2BAAOiD,OAAO,KACV,+BACI,4BACI,0CACA,yCACA,wCACA,8CAGR,+BAEQ9E,KAAKgB,MAAMsC,iBAAiByB,KACxB,SAAAzB,GAAgB,OACZ,wBAAI0B,IAAK1B,EAAiB2B,eAAgB9C,QAAS,kBAAM,EAAKyC,mBAAmBtB,EAAiB2B,eAAgB3B,EAAiB9B,WAC/H,4BAAK8B,EAAiBU,WACtB,4BAAKV,EAAiBW,UACtB,4BAAKX,EAAiB9B,SACtB,4BAAK8B,EAAiB4B,uB,yCAY3CnD,EAAIP,GACnBrC,QAAQC,IAAI2C,GACZ5C,QAAQC,IAAIoC,GACZxB,KAAKC,MAAM+C,QAAQC,KAAnB,4BAA6ClB,EAA7C,YAAmDP,Q,GA1EvBrB,aC2CrB,M,0GAxCP,OAAOb,IAAMkE,IAAN,4CAAuD,M,oCAI9D,OAAOlE,IAAMkE,IAAN,wCAAmD,M,gDAI1D,OAAOlE,IAAMkE,IAAN,oDAA+D,M,qCAItE,OAAOlE,IAAMkE,IAAN,yCAAoD,M,iCAGpDG,GAIP,OAHAxE,QAAQC,IAAIuE,GAGLrE,IAAMsE,IAAN,wCAAmDD,EAAM,M,oCAIhE,OAAOrE,IAAMkE,IAAN,wCAAmD,M,sCAG9C2B,GACZ,OAAO7F,IAAMkE,IAAN,oDAAuD2B,GAAU,M,+BAGnExB,GACL,OAAOrE,IAAMsE,IAAN,sCAAiDD,EAAM,M,oCAGpDyB,GACV,OAAO9F,IAAMsE,IAAN,2CAAsDwB,EAAM,Q,MChCtDC,E,YAEjB,WAAYpF,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTsE,OAAQ,GACRC,UAAW,GACXC,MAAO,IAEX,EAAKC,cAAgB,EAAKA,cAActE,KAAnB,gBACrB,EAAKuE,cAAgB,EAAKA,cAAcvE,KAAnB,gBARN,E,iFAWE,IAAD,OAChBrB,EAAsBiD,yBACtB4C,EAAYC,eACPlD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVmC,OAAQ3C,EAASE,UAEtBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAMrD0E,EAAYE,kBACPnD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVoC,UAAW5C,EAASE,UAEzBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAMrD0E,EAAYG,cACPpD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVqC,MAAO7C,EAASE,UAErBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAOrDb,IAAE,aAAaiB,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACHC,QAAS,CACLC,UAAU,EACVyC,OAAO,GAEX6B,YAAa,CACTtE,UAAU,EACVuE,QAAQ,GAEZC,WAAY,CACRxE,UAAU,GAEdyE,OAAQ,CACJzE,UAAU,GAEdb,SAAS,CACLa,UAAS,IAGjBC,eAAgB,SAAUC,EAAOnB,GAC7BmB,EAAMC,YAAYpB,Q,+BAMpB,IACE8E,EAAWtF,KAAKgB,MAAhBsE,OACAC,EAAcvF,KAAKgB,MAAnBuE,UACAC,EAAUxF,KAAKgB,MAAfwE,MAEJW,EAAYb,EAAOc,OAAS,GACzBd,EAAOP,KAAI,SAACsB,EAAMC,GACjB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKE,SAAUF,EAAKG,aAEhDxG,MACHyG,EAAgBlB,EAAUa,OAAS,GAChCb,EAAUR,KAAI,SAACsB,EAAMC,GACpB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKJ,YAAaI,EAAKK,gBAEnD1G,MACH2G,EAAWnB,EAAMY,OAAS,GACvBZ,EAAMT,KAAI,SAACsB,EAAMC,GAChB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKH,QAASG,EAAKO,YAE/C5G,MACP,OACI,yBAAK6B,UAAU,WACX,0BAAMC,KAAK,WAAWC,GAAG,YACrB,4BC9IU,mBAWT,QDkIL,MAEc,4BAAQA,GAAG,UAAUD,KAAK,WAChC,4BAAQvB,MAAM,IAAd,sBACC4F,GACI,6BAAS,6BC5Id,WDuIR,MAMiB,2BAAOjE,KAAK,OAAOH,GAAG,WAAWD,KAAK,aAAa,6BAAS,6BC5IrE,WDsIR,MAOiB,2BAAOI,KAAK,OAAOH,GAAG,UAAUD,KAAK,YAAY,6BAAS,6BC5InE,WDqIR,MAQiB,2BAAOI,KAAK,OAAOH,GAAG,cAAcD,KAAK,cAAc+E,UAAU,KAAKC,UAAU,MAAM,6BAAS,6BCvI5G,OD+HJ,MASa,4BAAQ/E,GAAG,SAASD,KAAK,UAC9B,4BAAQvB,MAAM,IAAd,sBACCoG,GACI,6BAAS,6BCvIJ,qBD2HlB,MAa2B,4BAAQ5E,GAAG,aAAaD,KAAK,cAChD,4BAAQvB,MAAM,IAAd,sBACCkG,GACI,6BAAS,6BCnJf,UDmIP,MAiBgB,4BAAQ1E,GAAG,aAAaD,KAAK,aAAaiF,UAAU,GAC5D,4BAAQxG,MAAM,IAAd,sBACCkG,GACI,6BAAS,6BAElB,4BAAQvE,KAAK,SAASC,QAASnC,KAAKyF,eChJ9B,UDiJN,4BAAQvD,KAAK,SAASC,QAASnC,KAAK0F,eChJ9B,UDgJkE,6BAAS,6BACjF,6BAAK,4BAAK1F,KAAKgB,MAAMC,c,sCAKpB,IAAD,OAEZ,GADA9B,QAAQC,IAAIgB,IAAE,eAAegC,OACzBE,UAAUC,OAAQ,CAClB,IAAIoB,EAAO,CACP/C,SAAUR,IAAE,aAAagC,MACzBZ,QAASpB,IAAE,YAAYgC,MACvB2D,YAAa3F,IAAE,gBAAgBgC,MAC/B4E,MAAO,CACHT,QAASnG,IAAE,YAAYgC,OAE3B6E,KAAM,CACFf,OAAQ9F,IAAE,WAAWgC,OAEzB8E,SAAU,CACNjB,WAAY7F,IAAE,eAAegC,OAEjC+E,WAAW/G,IAAE,eAAegC,OAE5BhC,IAAE,aAAaiC,SACfsD,EAAYyB,WAAWzD,GAClBjB,MAAK,SAAAC,GACF,EAAK1C,MAAM+C,QAAQC,KAAnB,oBAAqCN,EAASE,KAAK5B,aAEtDiC,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,mBAQzDmC,MAAM,yB,sCAIVpD,KAAKC,MAAM+C,QAAQC,KAAK,iC,GA9Mc9C,aEAzBkH,E,YAEjB,WAAYpH,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTsG,SAAU,IAEd,EAAKC,SAAW,EAAKA,SAASpG,KAAd,gBAChB,EAAKqG,cAAgB,EAAKA,cAAcrG,KAAnB,gBACrB,EAAKiG,WAAa,EAAKA,WAAWjG,KAAhB,gBAPH,E,iFAUE,IAAD,OAChBrB,EAAsBiD,yBACtB4C,EAAY8B,cACP/E,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVmE,SAAU3E,EAASE,UAG1BK,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,gB,+BAO/C,IAAD,OACL,OACI,yBAAKY,UAAU,YACX,2BAAI7B,KAAKC,MAAM+B,MAAMC,OAAOhB,SAC5B,4BDjDe,aCkDf,yBAAKY,UAAU,aACX,4BAAQK,KAAK,SAASwF,MAAO,CAAEC,WAAY,UAAYxF,QAASnC,KAAKoH,YDpD3D,mBCoDgG,6BAAM,6BAChH,2BAAOtC,OAAO,IAAI8C,MAAM,UACpB,+BACI,4BACI,4BD7CX,SC8CW,4BDnDR,YCoDQ,4BDnDR,YCoDQ,4BDnDR,YCoDQ,4BD9CZ,QC+CY,4BD3CE,sBC4CF,4BD9CD,mBC+CC,4BD9CD,mBC+CC,4BDjDV,UCkDU,4BD3CR,UC4CQ,4BD3CG,oBC8CX,+BAEQ5H,KAAKgB,MAAMsG,SAASvC,KAChB,SAAAK,GAAI,OAEA,wBAAIJ,IAAKI,EAAKD,OAAQhD,QAAS,kBAAM,EAAKoF,SAASnC,KAC/C,4BAAKA,EAAK4B,MAAMR,WAChB,4BAAKpB,EAAKxE,UACV,4BAAKwE,EAAK5D,SACV,4BAAK4D,EAAKW,aACV,4BAAKX,EAAK6B,KAAKL,UACf,4BAAKxB,EAAK8B,SAASR,cACnB,4BAAKtB,EAAKyC,eACV,4BAAKzC,EAAK0C,eACV,4BAA+B,QAA1B1C,EAAK2C,OAAOC,WAAuB,SAAW,YAEnD,4BAAI,4BAAQ9F,KAAK,SAASC,QAAS,kBAAM,EAAKoF,SAASnC,KD/D3E,WCgEoB,4BAAI,4BAAQlD,KAAK,SAASC,QAAS,SAAC8F,GAAQA,EAAEC,kBAAmB,EAAKV,cAAcpC,KD/D7F,6B,+BC0EtBA,GACLpF,KAAKC,MAAM+C,QAAQC,KAAK,CACpBkF,SAAU,YACVnH,MAAO,CAAEoE,KAAMA,O,oCAGTA,GAAO,IAAD,OACZ9C,UAAUC,OACVoD,EAAY6B,cAAcpC,GACrB1C,MAAK,SAAAC,GACF,EAAK1C,MAAM+C,QAAQC,KAAnB,oBAAqCN,EAASE,KAAK5B,UACnDmH,OAAOC,SAASC,YAEnBpF,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAOrDmC,MAAM,yB,mCAINd,UAAUC,OACVvC,KAAKC,MAAM+C,QAAQC,KAAnB,YAEAG,MAAM,2B,GA7H6BjD,aCF1BoI,E,YAEjB,WAAYtI,GAAQ,IAAD,8BACf,4CAAMA,KACD8D,WAAa,EAAKA,WAAW5C,KAAhB,gBAClB,EAAKqH,mBAAqB,EAAKA,mBAAmBrH,KAAxB,gBAC1B,EAAKH,MAAQ,CACTiE,eAAgB,EAAKhF,MAAM+B,MAAMC,OAAOgD,eACxCwD,QAAO,GANI,E,qHAaRrE,GACPpE,KAAKmD,SAAL,eACKiB,EAAMC,OAAOvC,KAAOsC,EAAMC,OAAO9D,U,+BAKtC,OACI,yBAAKsB,UAAU,oBACX,0BAAMC,KAAK,QAAQC,GAAG,QAAQuC,SAAUtE,KAAKwI,oBACzC,6CACA,2BAAOtG,KAAK,SAASH,GAAG,iBAAiBD,KAAK,iBAAiBvB,MAAOP,KAAKC,MAAM+B,MAAMC,OAAOgD,iBAFlG,cAGe,2BAAO/C,KAAK,OAAOH,GAAG,UAAUD,KAAK,UAAU4G,UAAQ,EAACnI,MAAOP,KAAKC,MAAM+B,MAAMC,OAAOT,UAAW,6BAAS,6BAH1H,UAKI,2BAAOU,KAAK,QAAQH,GAAG,SAASD,KAAK,SAASvB,MAAM,OAAOgE,SAAUvE,KAAK+D,WAAY4E,SAAO,IALjG,WAMI,2BAAOzG,KAAK,QAAQH,GAAG,SAASD,KAAK,SAASyC,SAAUvE,KAAK+D,WAAYxD,MAAM,UANnF,UAOI,6BAAS,6BAPb,WAQY,8BAAUwB,GAAG,QAAQD,KAAK,QAAQyC,SAAUvE,KAAK+D,aAAuB,6BAAS,6BACzF,4BAAQ7B,KAAK,UAAb,UAAqC,6BAAS,iC,yCAM3CkC,GAAQ,IAAD,OAEtB,GADAA,EAAMI,iBACFlC,UAAUC,QACV,GAAGnC,IAAE,UAAUiC,QAAQ,CACvB,IAAIsB,EAAO3D,KAAKgB,MAChB7B,QAAQC,IAAIuE,GACZc,EAAoBmE,aAAajF,GAC5BjB,MAAK,SAAAC,GACF,EAAK1C,MAAM+C,QAAQC,KAAnB,sDAEHC,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,oBAQrDmC,MAAM,2B,GAnEqCjD,aCGlC0I,GCyBN,I,yGA/BP,OAAOvJ,IAAMkE,IAAN,2CAAsD,M,8CAIzCC,GACpB,OAAOnE,IAAMkE,IAAN,4DAA+DC,GAAa,M,qCAInF,OAAOnE,IAAMkE,IAAN,yCAAoD,M,uDAI9BC,EAAWC,GACxC,OAAOpE,IAAMkE,IAAN,gDAAmDC,EAAnD,YAAgEC,GAAW,M,oCAIlF,OAAOpE,IAAMkE,IAAN,wCAAmD,M,uCAI7CG,GAIb,OAHAxE,QAAQC,IAAIuE,GAGLrE,IAAMsE,IAAN,8CAAyDD,EAAM,Q,kBDjB1E,WAAY1D,GAAQ,IAAD,8BACf,4CAAMA,KAHV6I,YAAa,EAIT,EAAK9H,MAAQ,CACTsE,OAAQ,GACRC,UAAW,GACXC,MAAO,GACPJ,KAAM,GACN,eAAe,GAEnB,EAAK2D,cAAgB,EAAKA,cAAc5H,KAAnB,gBACrB,EAAKuE,cAAgB,EAAKA,cAAcvE,KAAnB,gBACrB,EAAK4C,WAAa,EAAKA,WAAW5C,KAAhB,gBAXH,E,wEAcRiD,GACPpE,KAAKmD,SAAL,eACKiB,EAAMC,OAAOvC,KAAOsC,EAAMC,OAAO9D,U,0CAIrB,IAAD,OAChBT,EAAsBiD,yBACtB/C,KAAKmD,SAAS,CACViC,KAAMpF,KAAKC,MAAMoI,SAASrH,MAAMoE,OAEpCO,EAAYC,eACPlD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVmC,OAAQ3C,EAASE,UAEtBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAMrD0E,EAAYE,kBACPnD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVoC,UAAW5C,EAASE,UAEzBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAMrD0E,EAAYG,cACPpD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVqC,MAAO7C,EAASE,UAErBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAOrDb,IAAE,aAAaiB,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACH,eAAgB,CACZE,UAAU,EACVyC,OAAO,GAEX,mBAAoB,CAChBzC,UAAU,EACVuE,QAAQ,GAEZ,SAAY,CACRvE,UAAU,GAEd,2BAA4B,CACxBA,UAAU,GAEd,mBAAoB,CAChBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAOnB,GAC7BmB,EAAMC,YAAYpB,Q,iCAKnB4D,GAAQ,IACTgB,EAASpF,KAAKgB,MAAdoE,KACoB,uBAAtBhB,EAAMC,OAAOvC,KACbsD,EAAK4B,MAAMT,QAAUnC,EAAMC,OAAO9D,MAEP,uBAAtB6D,EAAMC,OAAOvC,KAClBsD,EAAK4B,MAAMT,QAAUnC,EAAMC,OAAO9D,MAEP,qBAAtB6D,EAAMC,OAAOvC,KAClBsD,EAAK6B,KAAKf,OAAS9B,EAAMC,OAAO9D,MAEL,6BAAtB6D,EAAMC,OAAOvC,KAClBsD,EAAK8B,SAASjB,WAAa7B,EAAMC,OAAO9D,MAEb,iBAAtB6D,EAAMC,OAAOvC,KAClBsD,EAAK5D,QAAU4C,EAAMC,OAAO9D,MAED,kBAAtB6D,EAAMC,OAAOvC,KAClBsD,EAAKxE,SAAWwD,EAAMC,OAAO9D,MAEF,qBAAtB6D,EAAMC,OAAOvC,KAClBsD,EAAKW,YAAc3B,EAAMC,OAAO9D,MAEL,gBAAtB6D,EAAMC,OAAOvC,OAClBsD,EAAK2C,OAA6B,iBAApB3D,EAAMC,OAAOtC,IAG/B/B,KAAKmD,SAAS,CACViC,SACD,iB,+BAMG,IACEE,EAAWtF,KAAKgB,MAAhBsE,OACAC,EAAcvF,KAAKgB,MAAnBuE,UACAC,EAAUxF,KAAKgB,MAAfwE,MAGJW,GAFanG,KAAKgB,MAAdoE,KAEQE,EAAOc,OAAS,GACzBd,EAAOP,KAAI,SAACsB,EAAMC,GACjB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKE,SAAUF,EAAKG,aAEhDxG,OACHyG,EAAgBlB,EAAUa,OAAS,GAChCb,EAAUR,KAAI,SAACsB,EAAMC,GACpB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKJ,YAAaI,EAAKK,gBAEnD1G,MACH2G,EAAWnB,EAAMY,OAAS,GACvBZ,EAAMT,KAAI,SAACsB,EAAMC,GAChB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKH,QAASG,EAAKO,YAE/C5G,MACP,OACI,yBAAK6B,UAAU,WACX,0BAAMC,KAAK,WAAWC,GAAG,YACrB,4BH7LW,iBG6LW/B,KAAKgB,MAAMoE,KAAKD,QHpLrC,QGmLL,MAEc,4BAAQpD,GAAG,qBAAqBD,KAAK,qBAAqBvB,MAAOP,KAAKgB,MAAMoE,KAAK4B,MAAQhH,KAAKgB,MAAMoE,KAAK4B,MAAMT,QAAU,GAAIhC,SAAUvE,KAAK+D,YAClJ,4BAAQxD,MAAM,IAAd,sBACC4F,GACI,6BAAS,6BH7Ld,WGwLR,MAMiB,2BAAOjE,KAAK,OAAOH,GAAG,gBAAgBD,KAAK,gBAAgBvB,MAAOP,KAAKgB,MAAMoE,KAAKxE,SAAU2D,SAAUvE,KAAK+D,aAAc,6BAAS,6BH7L3I,WGuLR,MAOiB,2BAAO7B,KAAK,OAAOH,GAAG,eAAeD,KAAK,eAAevB,MAAOP,KAAKgB,MAAMoE,KAAK5D,QAAS+C,SAAUvE,KAAK+D,aAAc,6BAAS,6BH7LxI,WGsLR,MAQiB,2BAAO7B,KAAK,OAAOH,GAAG,mBAAmBD,KAAK,mBAAmBvB,MAAOP,KAAKgB,MAAMoE,KAAKW,YAAaxB,SAAUvE,KAAK+D,WAAY8C,UAAU,KAAKC,UAAU,MAAM,6BAAS,6BHxLrL,OGgLJ,MASa,4BAAQ/E,GAAG,mBAAmBD,KAAK,mBAAmBvB,MAAOP,KAAKgB,MAAMoE,KAAK6B,KAAOjH,KAAKgB,MAAMoE,KAAK6B,KAAKf,OAAS,GAAI3B,SAAUvE,KAAK+D,YAC1I,4BAAQxD,MAAM,IAAd,sBACCoG,GACI,6BAAS,6BHxLJ,qBG4KlB,MAa2B,4BAAQ5E,GAAG,2BAA2BD,KAAK,2BAA2BvB,MAAOP,KAAKgB,MAAMoE,KAAK8B,SAAWlH,KAAKgB,MAAMoE,KAAK8B,SAASjB,WAAa,GAAI1B,SAAUvE,KAAK+D,YACpL,4BAAQxD,MAAM,IAAd,sBACCkG,GACI,6BAAS,6BH/LhB,SG+KN,IAkBI,2BAAOvE,KAAK,QAAQH,GAAG,eAAeD,KAAK,cAAcvB,OAAO,EAAMoI,SAAoC,IAA3B3I,KAAKgB,MAAMoE,KAAK2C,OAAiBxD,SAAUvE,KAAK+D,aAlBnI,UAmBI,2BAAO7B,KAAK,QAAQH,GAAG,eAAeD,KAAK,cAAcvB,OAAO,EAAOoI,SAAoC,IAA3B3I,KAAKgB,MAAMoE,KAAK2C,OAAkBxD,SAAUvE,KAAK+D,aAnBrI,YAoBI,6BAAS,6BAET,4BAAQ7B,KAAK,SAASC,QAASnC,KAAK+I,eH/L9B,UGgMN,4BAAQ7G,KAAK,SAASC,QAASnC,KAAK0F,eHjM9B,UGiMkE,6BAAS,6BACjF,6BAAK,4BAAK1F,KAAKgB,MAAMC,c,sCAKpB,IAAD,OACZ,GAAIqB,UAAUC,OAAQ,CAClB,IAAIoB,EAAO3D,KAAKgB,MAAMoE,KAClBhF,IAAE,aAAaiC,SACfsD,EAAY4B,SAAS5D,GAChBjB,MAAK,SAAAC,GACF,EAAK1C,MAAM+C,QAAQC,KAAnB,oBAAqCN,EAASE,KAAK5B,aAEtDiC,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,mBAQzDmC,MAAM,yB,sCAIVpD,KAAKC,MAAM+C,QAAQC,KAAK,iC,GA/Oe9C,cEN1B6I,E,YAEjB,WAAY/I,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTwE,MAAO,GACPvE,QAAS,mBAJE,E,iFAQE,IAAD,OAChB9B,QAAQC,IAAI,6BAEZuG,EAAYG,cACPpD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVqC,MAAO7C,EAASE,UAErBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBAKL,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,gB,+BASvC,OACI,oCACI,8DACA,2BAAO6D,OAAO,IAAI8C,MAAM,UACpB,+BACI,4BACI,uCACA,2CAGR,+BAEQ5H,KAAKgB,MAAMwE,MAAMT,KAAI,SAAAkC,GAAI,OACrB,wBAAIjC,IAAKiC,EAAKf,QACV,4BAAKe,EAAKf,QACV,4BAAKe,EAAKL,gBAK9B,6BACA,4BAAK5G,KAAKgB,MAAMC,c,GA1Ded,aCK1B8I,E,YAEjB,WAAYhJ,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTkI,kBAAmB,GACnB1D,MAAO,IAEX,EAAKC,cAAgB,EAAKA,cAActE,KAAnB,gBACrB,EAAKuE,cAAgB,EAAKA,cAAcvE,KAAnB,gBAPN,E,iFAUE,IAAD,OAChBrB,EAAsBiD,yBACtB4C,EAAYwD,0BACPzG,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACV+F,kBAAmBvG,EAASE,UAEjCK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cAMjD0E,EAAYG,cACXpD,MAAK,SAAAC,GACF,EAAKQ,SAAS,CACVqC,MAAO7C,EAASE,UAErBK,OACC,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,cASrDb,IAAE,aAAaiB,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACH0E,WAAY,CACRxE,UAAU,GAEdyE,OAAQ,CACJzE,UAAU,GAEdb,SAAS,CACLa,UAAS,IAGjBC,eAAgB,SAAUC,EAAOnB,GAC7BmB,EAAMC,YAAYpB,Q,+BAMpB,IACE0I,EAAsBlJ,KAAKgB,MAA3BkI,kBACA1D,EAAUxF,KAAKgB,MAAfwE,MAEJ4D,EAAwBF,EAAkB9C,OAAS,GAChD8C,EAAkBnE,KAAI,SAACsB,EAAMC,GAC5B,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKgD,oBAAqBhD,EAAKiD,wBAE3DtJ,MACC2G,EAAWnB,EAAMY,OAAS,GAC3BZ,EAAMT,KAAI,SAACsB,EAAMC,GAChB,OACI,4BAAQtB,IAAKsB,EAAG/F,MAAO8F,EAAKH,QAASG,EAAKO,YAE/C5G,MACP,OACI,yBAAK6B,UAAU,WACX,0BAAMC,KAAK,WAAWC,GAAG,YACrB,4BNxGU,gBAwBL,YM+ET,MAEkB,2BAAOG,KAAK,OAAOH,GAAG,WAAWD,KAAK,aAAa,6BAAS,6BNhFvE,UM8EP,MAGgB,2BAAOI,KAAK,OAAOH,GAAG,UAAUD,KAAK,YAAY,6BAAS,6BNhFzD,oBM6EjB,MAI0B,4BAAQC,GAAG,sBAAsBD,KAAK,sBAAsBiF,UAAU,GACxF,4BAAQxG,MAAM,IAAd,sBACC6I,GACI,6BAAS,6BNnFP,kBM4Ef,MAQwB,4BAAQrH,GAAG,mBAAmBD,KAAK,mBAAmBiF,UAAU,GAChF,4BAAQxG,MAAM,IAAd,sBACCoG,GACI,6BAAS,6BAElB,4BAAQzE,KAAK,SAASC,QAASnC,KAAKyF,eNpG9B,UMqGN,4BAAQvD,KAAK,SAASC,QAASnC,KAAK0F,eNpG9B,UMoGkE,6BAAS,6BACjF,6BAAK,4BAAK1F,KAAKgB,MAAMC,c,sCAKpB,IAAD,OAEZ,GAAIqB,UAAUC,OAAQ,CAClB,IAAIoB,EAAO,CACP/C,SAAUR,IAAE,aAAagC,MACzBZ,QAASpB,IAAE,YAAYgC,MACvB2D,YAAa3F,IAAE,gBAAgBgC,MAC/B4E,MAAO,CACHT,QAASnG,IAAE,YAAYgC,OAE3B6E,KAAM,CACFf,OAAQ9F,IAAE,WAAWgC,OAEzB8E,SAAU,CACNjB,WAAY7F,IAAE,eAAegC,OAEjC+E,WAAW/G,IAAE,eAAegC,OAE5BhC,IAAE,aAAaiC,SACfsD,EAAYyB,WAAWzD,GAClBjB,MAAK,SAAAC,GACF,EAAK1C,MAAM+C,QAAQC,KAAnB,oBAAqCN,EAASE,KAAK5B,aAEtDiC,OACG,SAAAvB,GACI,OAAQA,EAAMV,SACV,IAAK,gBACD,EAAKkC,SAAS,CACVlC,QAASU,EAAMV,UAEnB,MACJ,QACI,EAAKkC,SAAS,CACVlC,QAASU,EAAMgB,SAASE,KAAK5B,mBAQzDmC,MAAM,yB,sCAIVpD,KAAKC,MAAM+C,QAAQC,KAAK,iC,GAlKc9C,aCHzBoJ,E,YAEjB,WAAYtJ,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTwI,cAAe,GACfC,cAAc,IAElB,EAAK1F,WAAa,EAAKA,WAAW5C,KAAhB,gBAClB,EAAKuI,QAAU,EAAKA,QAAQvI,KAAb,gBACf,EAAKwI,QAAU,EAAKA,QAAQxI,KAAb,gBARA,E,sEAYf,OACI,yDAC6B,6BAAM,6BAC/B,8BAAUY,GAAG,WAAWD,KAAK,WAAWyC,SAAUvE,KAAK+D,aAAc,6BAAS,6BAC9E,4BAAQ7B,KAAK,SAASC,QAASnC,KAAK0J,SAApC,WAA6D,6BAAS,6BAH1E,uBAIyB1J,KAAKgB,MAAMwI,cAAc,6BAAS,6BACvD,6BALJ,gCAMiC,6BAAM,6BACnC,8BAAUzH,GAAG,4BAA4BD,KAAK,4BAA4ByC,SAAUvE,KAAK+D,aAAc,6BAAS,6BAChH,4BAAQ7B,KAAK,SAASC,QAASnC,KAAK2J,SAApC,WAA6D,6BAAS,6BAR1E,uBASyB3J,KAAKgB,MAAMyI,iB,iCAMjCrF,GACPpE,KAAKmD,SAAL,eACKiB,EAAMC,OAAOvC,KAAOsC,EAAMC,OAAO9D,U,gCAMtC,IAAIqJ,EAAaC,IAASC,IAAIJ,QAAQK,KAAKC,UAAUhK,KAAKgB,MAAMiJ,UAAW,kBAC3EjK,KAAKmD,SAAS,CACVqG,cAAeI,EAAW5B,e,gCAK9B7I,QAAQC,IAAI,cACZ,IACI8K,EADQL,IAASC,IAAIH,QAAQ3J,KAAKgB,MAAMmJ,0BAA2B,kBACjDnC,SAAS6B,IAASO,IAAIC,MAE5CrK,KAAKmD,SAAS,CACVsG,cAAeM,KAAKO,MAAMJ,S,GAlDwB/J,aC2C/CoK,E,iLA/BP,OACI,yBAAK1I,UAAU,WACX,kBAAC,IAAD,KACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO2I,KAAK,IAAIC,OAAK,EAACC,UAAW3J,IACjC,kBAAC,IAAD,CAAOyJ,KAAK,kBAAkBE,UAAW3J,IACzC,kBAAC,IAAD,CAAOyJ,KAAK,WAAWE,UAAWrF,IAClC,kBAAC,IAAD,CAAOmF,KAAK,YAAYC,OAAK,EAACC,UAAWrD,IACzC,kBAAC,IAAD,CAAOmD,KAAK,qBAAqBE,UAAWrD,IAC5C,kBAAC,IAAD,CAAOmD,KAAK,YAAYE,UAAW7B,IACnC,kBAAC,IAAD,CAAO2B,KAAK,WAAWE,UAAWzB,IAClC,kBAAC,IAAD,CAAOuB,KAAK,YAAYE,UAAW1B,IACnC,kBAAC,IAAD,CAAOwB,KAAK,qBAAqBE,UAAWnB,IAC5C,kBAAC,IAAD,CAAOiB,KAAK,qBAAqBE,UAAW1B,IAE5C,kBAAC,EAAD,CAAoBwB,KAAK,WAAWE,UAAWrH,IAC/C,kBAAC,EAAD,CAAoBmH,KAAK,gBAAgBE,UAAW7G,IACpD,kBAAC,EAAD,CAAoB2G,KAAK,6BAA6BE,UAAW/F,IACjE,kBAAC,EAAD,CAAoB6F,KAAK,oBAAoBE,UAAW/F,IACxD,kBAAC,EAAD,CAAoB6F,KAAK,6CAA6CE,UAAWnC,IACjF,kBAAC,IAAD,CAAOmC,UAAWnH,Y,GAvBxBpD,aCHPwK,MATf,WAEE,OACE,yBAAK9I,UAAU,OACb,kBAAC,EAAD,QCIA+I,EAAcC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAAS9I,MACvB,2DAsCN,SAAS+I,EAAgBC,EAAOtL,GAC9B4C,UAAU2I,cACPC,SAASF,GACTtI,MAAK,SAAAtB,GACJA,EAAa+J,cAAgB,WAC3B,IAAMC,EAAmBhK,EAAaiK,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpK,QACfsB,UAAU2I,cAAcM,YAI1BpM,QAAQC,IACN,iHAKEM,GAAUA,EAAO8L,UACnB9L,EAAO8L,SAASpK,KAMlBjC,QAAQC,IAAI,sCAGRM,GAAUA,EAAO+L,WACnB/L,EAAO+L,UAAUrK,WAO5B8B,OAAM,SAAAvB,GACLxC,QAAQwC,MAAM,4CAA6CA,MC1FjE+J,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBnM,GACvB,GAA6C,kBAAmB4C,UAAW,CAGzE,GADkB,IAAIwJ,IAAIC,gBAAwB3D,OAAOC,SAAS2D,MACpDC,SAAW7D,OAAOC,SAAS4D,OAIvC,OAGF7D,OAAO8D,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMe,gBAAN,sBAEPnB,IAgEV,SAAiCI,EAAOtL,GAEtCyM,MAAMnB,EAAO,CACXrL,QAAS,CAAE,iBAAkB,YAE5B+C,MAAK,SAAAC,GAEJ,IAAMyJ,EAAczJ,EAAShD,QAAQ6D,IAAI,gBAEnB,MAApBb,EAAS8F,QACO,MAAf2D,IAA8D,IAAvCA,EAAYC,QAAQ,cAG5C/J,UAAU2I,cAAcqB,MAAM5J,MAAK,SAAAtB,GACjCA,EAAamL,aAAa7J,MAAK,WAC7B0F,OAAOC,SAASC,eAKpByC,EAAgBC,EAAOtL,MAG1BwD,OAAM,WACL/D,QAAQC,IACN,oEAvFAoN,CAAwBxB,EAAOtL,GAI/B4C,UAAU2I,cAAcqB,MAAM5J,MAAK,WACjCvD,QAAQC,IACN,iHAMJ2L,EAAgBC,EAAOtL,OCvC/BuL,I","file":"static/js/main.e1a2e0e6.chunk.js","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService {\n\n    isUserLoggedIn() {\n        let user = localStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    setupAxiosInterceptors() {\n        console.log(\"Inside interceptor setup\");\n        let token = localStorage.getItem('token');\n        let basicAuthHeader = 'Bearer ' + token\n        console.log(\"headers=\"+basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n        \n    }\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from \"react\";\nimport AuthenticationService from \"./AuthenticationService.js\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nclass AuthenticatedRoute extends Component {\n\n    render() {\n        if (AuthenticationService.isUserLoggedIn) {\n            console.log(\"in user logged in\")\n            return <Route {...this.props} />\n        } else {\n            console.log(\"in else\")\n            return <Redirect to=\"/login\" />\n        }\n    }\n\n}\n\nexport default AuthenticatedRoute","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");","export const API_URL = 'http://localhost:8081'","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n}\n\nexport default new LoginService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.registration = this.registration.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Login</h3>\n                    <p>{this.props.match.params.message}</p>\n                    Username : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    Password : <input type=\"password\" id=\"password\" name=\"password\" /><br></br><br></br>\n                    <button type=\"button\" onClick={this.loginClicked}>Login</button><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.registration}>Sign Up</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            console.log(\"Going to perform login\");\n            if (!AuthenticationService.isUserLoggedIn===false  && navigator.onLine) {\n                console.log(\"Inside Authentication not found\");\n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        localStorage.setItem('token', response.data.token);\n                        AuthenticationService.setupAxiosInterceptors();\n                        this.props.history.push(`/welcome`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                if (AuthenticationService.isUserLoggedIn) {\n                    console.log(\"Offline authentication\");\n                    // let user = localStorage.getItem('authenticatedUser');\n                    // var userJson = JSON.parse(user);\n                    // var bytes = CryptoJS.AES.decrypt(userJson.password, 'my-secret-key@123');\n                    // var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                    // if (userJson.emailId === username) {\n                        // this.props.history.push(`/welcome`)\n                    // } else {\n                        // this.setState({\n                            // message: \"Invalid Credentials.\"\n                        // })\n                    // }\n                } else {\n                    alert(\"You must be Online for a first time login.\")\n                }\n            }\n        }\n    }\n\n    registration() {\n        this.props.history.push(`/registration`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.listUserApproval=this.listUserApproval.bind(this);\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!!</h1>\n                <button type=\"button\" onClick={this.listUserApproval}>User Approval</button><br></br><br></br>\n            </>\n        );\n    }\n\n    listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }\n}\n\nexport default WelcomeComponent","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div>An Error occurred</div>\n    )\n}\n\nexport default ErrorComponent","import axios from \"axios\"\nimport {API_URL} from '../Constants.js' \n\nclass RegistrationService {\n    getCountryList() {\n        return axios.get(`${API_URL}/api/getCountryList`, {\n        });\n    }\n\n    getStateList(countryId) {\n        return axios.get(`${API_URL}/api/getStateList/${countryId}`, {\n        });\n    }\n\n    getCityList(countryId, stateId) {\n        return axios.get(`${API_URL}/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/saveRegistration/`, json, {\n        });\n    }\n\n    getUserApprovalList() {\n        return axios.get(`${API_URL}/api/getUserApprovalList`, {\n        });\n    }\n\n    saveApproval(json) {\n        return axios.put(`${API_URL}/api/saveApproval`, json, {\n        });\n    }\n}\n\nexport default new RegistrationService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport RegistrationService from \"../../api/RegistrationService.js\";\n\n\nexport default class RegistrationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.registerClicked = this.registerClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        $.validator.addMethod('nofreeemail', function (value) {\n            return /^([\\w-.]+@(?!gmail\\.com)(?!yahoo\\.com)(?!hotmail\\.com)([\\w-]+.)+[\\w-]{2,4})?$/.test(value);\n        }, 'Free email addresses are not allowed.');\n\n\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                firstName: {\n                    required: true\n                },\n                lastName: {\n                    required: true\n                },\n                emailId: {\n                    required: true,\n                    email: true,\n                    nofreeemail:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"register\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.registerClicked}>\n                    <h3>Sign Up</h3>\n                    First Name : <input type=\"text\" id=\"firstName\" name=\"firstName\" onChange={this.dataChange} /><br></br><br></br>\n                    Last Name : <input type=\"text\" id=\"lastName\" name=\"lastName\" onChange={this.dataChange} /><br></br><br></br>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" onChange={this.dataChange} /><br></br><br></br>\n                    <button type=\"submit\">Sign Up</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    registerClicked(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            var json = this.state\n            if ($(\"#form1\").valid()) {\n                RegistrationService.saveRegistration(json)\n                    .then(response => {\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from \"react\";\nimport RegistrationService from '../../api/RegistrationService.js';\n\nclass UserApprovalComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listUserApproval: []\n        }\n        this.updateUserApproval = this.updateUserApproval.bind(this);\n    }\n\n\n    componentDidMount() {\n        RegistrationService.getUserApprovalList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listUserApproval: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <h1>List User Approval</h1>\n                <p>{this.props.match.params.message}</p>\n                <div className=\"container\">\n                    <table border=\"1\">\n                        <thead>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email Id</th>\n                                <th>Created date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.listUserApproval.map(\n                                    listUserApproval =>\n                                        <tr key={listUserApproval.registrationId} onClick={() => this.updateUserApproval(listUserApproval.registrationId, listUserApproval.emailId)}>\n                                            <td>{listUserApproval.firstName}</td>\n                                            <td>{listUserApproval.lastName}</td>\n                                            <td>{listUserApproval.emailId}</td>\n                                            <td>{listUserApproval.createdDate}</td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n    updateUserApproval(id, emailId) {\n        console.log(id);\n        console.log(emailId);\n        this.props.history.push(`/editUserApproval/${id}/${emailId}`)\n    }\n}\n\nexport default UserApprovalComponent","import axios from \"axios\";\nimport { API_URL } from '../Constants';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`http://localhost:8081/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`http://localhost:8081/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`http://localhost:8081/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`http://localhost:8081/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/addNewUser/`, json, {\n        });\n    }\n    getUserList() {\n        return axios.get(`http://localhost:8081/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`http://localhost:8081/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`http://localhost:8081/api/editUser/`, json, {\n        });\n    }\n    unlockAccount(user) {\n        return axios.put(`http://localhost:8081/api/unlockAccount/`, user, {\n        });\n    }\n}\n\nexport default new UserService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { COUNTRY,EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ADDRESS, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_ADD_USER}</h3>\n                    {REALM} : <select id=\"realmId\" name=\"realmId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"roleId\" name=\"roleId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"languageId\" name=\"languageId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {COUNTRY} : <select id=\"countryIds\" name=\"countryIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","export const TITLE_ADD_USER = 'Create new user'\nexport const TITLE_USER_LIST = 'User List'\nexport const TITLE_EDIT_USER = 'Update user - '\nexport const TITLE_ADD_ROLE = 'Add new role'\nexport const TITLE_ROLE_LIST = 'Role List'\nexport const TITLE_EDIT_ROLE = 'Update role - '\nexport const USERNAME = 'Username'\nexport const EMAIL_ID = 'Email Id'\nexport const PHONE_NO = 'Phone No'\nexport const ADDRESS = 'Address'\nexport const COUNTRY = 'Country'\nexport const REALM = 'Realm'\nexport const STATE = 'State/Province'\nexport const CITY = 'City'\nexport const ROLE = 'Role'\nexport const ACTIVE = 'Status'\nexport const LAST_LOGIN_DATE = 'Last Login Date'\nexport const FAILED_ATTEMPTS = 'Failed Attempts'\nexport const PREFERRED_LANGUAGE = 'Preferred Language'\nexport const BTN_SUBMIT = 'Submit'\nexport const BTN_CANCEL = 'Cancel'\nexport const BTN_UPDATE = 'Update'\nexport const BTN_EDIT = 'Update'\nexport const BTN_FAILED_ATTEMPTS = 'Unlock account'\nexport const HEALTH_AREA = 'Health Area'\nexport const ORGANISATION = 'Organisation'\nexport const REGION = 'Region'\nexport const ROLE_NAME = 'Role Name'\nexport const ROLE_ID = 'Role Id'\nexport const BUSINESS_FUNCTION = 'Business function'\nexport const CAN_CREATE_ROLE = 'Can create role'","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst cache = {}\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{REALM}</th>\n                                <th>{USERNAME}</th>\n                                <th>{EMAIL_ID}</th>\n                                <th>{PHONE_NO}</th>\n                                <th>{ROLE}</th>\n                                <th>{PREFERRED_LANGUAGE}</th>\n                                <th>{LAST_LOGIN_DATE}</th>\n                                <th>{FAILED_ATTEMPTS}</th>\n                                <th>{ACTIVE}</th>\n                                <th>{BTN_EDIT}</th>\n                                <th>{BTN_FAILED_ATTEMPTS}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.userList.map(\n                                    user =>\n                                        // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                        <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                            <td>{user.realm.realmCode}</td>\n                                            <td>{user.username}</td>\n                                            <td>{user.emailId}</td>\n                                            <td>{user.phoneNumber}</td>\n                                            <td>{user.role.roleName}</td>\n                                            <td>{user.language.languageName}</td>\n                                            <td>{user.lastLoginDate}</td>\n                                            <td>{user.faildAttempts}</td>\n                                            <td>{user.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                            </td>\n                                            <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                            <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(user) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(user)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport RegistrationService from '../../api/RegistrationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditUserApprovalComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.dataChange = this.dataChange.bind(this);\n        this.submitUserApproval = this.submitUserApproval.bind(this);\n        this.state = {\n            registrationId: this.props.match.params.registrationId,\n            status:true\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"editUserApproval\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.submitUserApproval}>\n                    <h3>User Approval</h3>\n                    <input type=\"hidden\" id=\"registrationId\" name=\"registrationId\" value={this.props.match.params.registrationId}></input>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" readOnly value={this.props.match.params.emailId} /><br></br><br></br>\n                    Status:\n                    <input type=\"radio\" id=\"status\" name=\"status\" value=\"TRUE\" onChange={this.dataChange} checked/> Approve\n                    <input type=\"radio\" id=\"status\" name=\"status\" onChange={this.dataChange} value=\"FALSE\" /> Reject\n                    <br></br><br></br>\n                    Notes : <textarea id=\"notes\" name=\"notes\" onChange={this.dataChange}></textarea><br></br><br></br>\n                    <button type=\"submit\">Submit</button><br></br><br></br>\n                </form>\n            </div>\n        )\n    }\n\n    submitUserApproval(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            if($(\"#form1\").valid()){\n            var json = this.state\n            console.log(json);\n            RegistrationService.saveApproval(json)\n                .then(response => {\n                    this.props.history.push(`/listUserApproval/Approval updated successfully`)\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport SignUpService from \"../../api/SignUpService\";\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: [],\n            user: '',\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n\n    }\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            user: this.props.location.state.user\n        });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'username': {\n                    required: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.role.roleId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.role.roleId\") {\n            user.role.roleId = event.target.value\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                    {REALM} : <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"user.role.roleId\" name=\"user.role.roleId\" value={this.state.user.role ? this.state.user.role.roleId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {ACTIVE}:\n                    <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                    <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                    <br></br><br></br>\n\n                    <button type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            var json = this.state.user;\n            if ($(\"#userForm\").valid()) {\n                UserService.editUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import axios from \"axios\"\n\nclass SignUpService {\n    getCountryList() {\n        return axios.get(`http://localhost:8081/api/getCountryList`, {\n        });\n    }\n\n    getStateListByCountryId(countryId) {\n        return axios.get(`http://localhost:8081/api/getStateListByCountryId/${countryId}`, {\n        });\n    }\n    getStateList() {\n        return axios.get(`http://localhost:8081/api/getStateList`, {\n        });\n    }\n\n    getCityListByStateIdAndCountryId(countryId, stateId) {\n        return axios.get(`http://localhost:8081/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n    getCityList() {\n        return axios.get(`http://localhost:8081/api/getCityList`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/saveRegistration/`, json, {\n        });\n    }\n}\n\nexport default new SignUpService()","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"Initial message\"\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"Going to call axios setup\");\n        \n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <div>Hi this is the Role list page</div>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Role Id</th>\n                            <th>Role name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.roleName}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n                <h3>{this.state.message}</h3>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { ROLE_NAME,ROLE_ID,BUSINESS_FUNCTION,CAN_CREATE_ROLE,TITLE_ADD_ROLE,BTN_SUBMIT, BTN_CANCEL} from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n            UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n       \n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <option key={i} value={item.businessFunctionId}>{item.businessFunctionDesc}</option>\n                )\n            }, this);\n            let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addRole\">\n                <form name=\"roleForm\" id=\"roleForm\">\n                    <h3>{TITLE_ADD_ROLE}</h3>\n                    {ROLE_NAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {ROLE_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {BUSINESS_FUNCTION} : <select id=\"businessFunctionIds\" name=\"businessFunctionIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {businessFunctionsList}\n                    </select><br></br><br></br>\n                    {CAN_CREATE_ROLE} : <select id=\"canCreateRoleIds\" name=\"canCreateRoleIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        // console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CryptoJS from 'crypto-js';\n\nexport default class EncryptionAndDecryptionComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            encryptedText: '',\n            decryptedText:''\n        }\n        this.dataChange = this.dataChange.bind(this);\n        this.encrypt = this.encrypt.bind(this);\n        this.decrypt = this.decrypt.bind(this);\n    }\n\n    render() {\n        return (\n            <div>\n                JSON text to be encrypted<br /><br />\n                <textarea id=\"jsonText\" name=\"jsonText\" onChange={this.dataChange} /><br></br><br></br>\n                <button type=\"submit\" onClick={this.encrypt}>Encrypt</button><br></br><br></br>\n                Encrypted text is : {this.state.encryptedText}<br></br><br></br>\n                <hr></hr>\n                Encrpted text to be decrypted<br /><br />\n                <textarea id=\"encyptedTextToBeDecrypted\" name=\"encyptedTextToBeDecrypted\" onChange={this.dataChange} /><br></br><br></br>\n                <button type=\"submit\" onClick={this.decrypt}>Decrypt</button><br></br><br></br>\n                Decrypted text is : {this.state.decryptedText}\n\n            </div>\n        )\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n\n    }\n\n    encrypt() {\n        var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(this.state.jsonText), 'secret key 123');\n        this.setState({\n            encryptedText: ciphertext.toString()\n        })\n    }\n\n    decrypt() {\n        console.log('in decrypt');\n        var bytes = CryptoJS.AES.decrypt(this.state.encyptedTextToBeDecrypted, 'secret key 123');\n        var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n\n        this.setState({\n            decryptedText: JSON.parse(plaintext)\n        })\n\n    }\n}","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport RegistrationComponent from \"../user/RegistrationComponent\";\nimport UserApprovalComponent from \"../user/UserApprovalComponent\";\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserApprovalComponent from \"../user/EditUserApprovalComponent\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport EncryptionAndDecryptionComponent from \"../common/EncryptionAndDecryptionComponent.jsx\";\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"Sidebar\">\n                <Router>\n                    <>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent} />\n                            <Route path=\"/login/:message\" component={LoginComponent} />\n                            <Route path=\"/addUser\" component={AddUserComponent} />\n                            <Route path=\"/userList\" exact component={UserListComponent} />\n                            <Route path=\"/userList/:message\" component={UserListComponent} />\n                            <Route path=\"/editUser\" component={EditUserComponent} />\n                            <Route path=\"/addRole\" component={AddRoleComponent} />\n                            <Route path=\"/roleList\" component={RoleListComponent} />\n                            <Route path=\"/encryptAndDecrypt\" component={EncryptionAndDecryptionComponent} />\n                            <Route path=\"/roleList/:message\" component={RoleListComponent} />\n                            {/* <Route path=\"/editRole\" component={RoleListComponent} /> */}\n                            <AuthenticatedRoute path=\"/welcome\" component={WelcomeComponent} />\n                            <AuthenticatedRoute path=\"/registration\" component={RegistrationComponent} />\n                            <AuthenticatedRoute path=\"/listUserApproval/:message\" component={UserApprovalComponent} />\n                            <AuthenticatedRoute path=\"/listUserApproval\" component={UserApprovalComponent} />\n                            <AuthenticatedRoute path=\"/editUserApproval/:registrationId/:emailId\" component={EditUserApprovalComponent} />\n                            <Route component={ErrorComponent} />\n                        </Switch>\n                    </>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/common/Sidebar';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}